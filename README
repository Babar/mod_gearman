Gearman Module for Nagios
=========================

mod_gearman is a new way of distributing active nagios checks across
your network. It consists of two parts.
There is a NEB module which resides in the nagios core and adds
Servicechecks, Hostchecks and Eventhandler to a gearman
(http://gearman.org) queue. There can be multiple equal gearman
servers.
The other part is one or more worker clients for the work. They
can be bound to host and servicegroups.


HOW DOES IT WORK
----------------
When the broker module is loaded, it captures all servicecheck,
hostcheck and the eventhandler events. Eventhandler are sent to a
generic 'eventhandler' queue. Checks for hosts which are in one of the
specified hostgroups, are sent into a seperate hostgroup queue. All
non matching hosts are sent to a generic hosts queue. Checks for
services are first checked against the list of servicegroups, then
against the hostgroups and if none matches they will be sent into a
generic service queue.
The NEB module starts a single thread, which monitors the result queue
where all results resides.

A simple example queue would look like:
 +---------------+------------------+--------------+--------------+
 | Queue Name    | Worker Available | Jobs Waiting | Jobs Running |
 +---------------+------------------+--------------+--------------+
 | check_results | 1                | 0            | 0            |
 | host          | 50               | 0            | 1            |
 | service       | 50               | 0            | 13           |
 | eventhandler  | 50               | 0            | 0            |
 +---------------+------------------+--------------+--------------+

There is one queue for the results and two for the checks plus the
eventhandler.

The workflow is simple:
 1. Nagios wants to execute a service check.
 2. The check is intercepted by the mod_gearman neb module.
 3. mod_gearman puts the job into the "service" queue.
 4. a worker grabs the job and puts back the result into the
    "check_results" queue
 5. mod_gearman grabs the result job and puts back the result into the
    core


If you specifiy some host or servicegroups. This example uses a
seperate hostgroup for japan and a seperate servicegroup for
"jmx4perl".

It would look like this:
 +-----------------------+------------------+--------------+--------------+
 | Queue Name            | Worker Available | Jobs Waiting | Jobs Running |
 +-----------------------+------------------+--------------+--------------+
 | check_results         | 1                | 0            | 0            |
 | host                  | 50               | 0            | 1            |
 | service               | 50               | 0            | 13           |
 | servicegroup_jmx4perl | 3                | 0            | 3            |
 | hostgroup_japan       | 3                | 1            | 3            |
 | eventhandler          | 50               | 0            | 0            |
 +-----------------------+------------------+--------------+--------------+

You still have the generic queues and in addition there are two queues
for the specific groups.


The worker processes will take jobs from the queues and put the result
back into the check_result queue which will then be taken back by the
neb module and put back into the nagios core. A worker can work on one
or more queues. So you could start a worker which only handles the
"hostgroup_japan" group.  One worker for the "jmx4perl" checks and one
worker which covers the other queues. There can be more than one
worker on each queue which would share the load.



Installation
------------

Pre Requirements: 
 - gcc / g++
 - autoconf / automake / autoheader
 - libtool
 - libgearman (>= 0.14)


Download the tarball and do "make". Add the neb_module/mod_gearman.o to your
nagios installation and add a broker line to your nagios.cfg:

======
  broker_module=.../mod_gearman.o server=localhost:4730 eventhandler=yes services=yes hosts=yes
======
see <Configuration> for details on all parameters


The last step is to start one or more worker. There is currently no
init script. So just start it by hand.
======
./scripts/worker.pl --server=localhost:4730 --events --services --hosts --threads=15
======


Patch Nagios
++++++++++++

It is not possible to distribute Eventhandler without patching Nagios
as the moment. So please apply the patch from the patches dir to your
Nagios sources and build nagios again. You only need to replace the
nagios binary. Nothing else has changed.
If you plan to distribute only Host/Servicechecks, no patch is needed.



Configuration
-------------

NEB Module
++++++++++

there are several module options:


debug:              use debug to increase the verbosity of the module.
                    Possible values are:
                        0 = only errors
                        1 = debug messages
                        2 = trace messages
                        3 = trace and all gearman related logs are going to stdout.

                    Example: debug=1


server:             sets the addess of your gearman job server. Can be specified
                    more than once to add more server.

                    Example: server=localhost:4730,remote_host:4730


eventhandler:       defines if the module should distribute execution of
                    eventhandlers.

                    Example: eventhandler=yes


services:           defines if the module should distribute execution of
                    service checks.

                    Example: services=yes


hosts:              defines if the module should distribute execution of
                    host checks.

                    Example: hosts=yes


hostgroups:         sets a list of hostgroups which will go into seperate
                    queues.

                    Example: hostgroups=name1,name2,name3


servicegroups:      sets a list of servicegroups which will go into seperate
                    queues.

                    Example: servicegroups=name1,name2,name3


localhostgroups:    sets a list of hostgroups which will not be executed
                    by gearman. They are just passed through.

                    Example: localhostgroups=name1,name2,name3

localservicegroups: sets a list of servicegroups which will not be executed
                    by gearman. They are just passed through.

                    Example: localservicegroups=name1,name2,name3

result_workers      Number of result worker threads. Usually one is
                    enough. You may increase the value if your
                    result queue is not processed fast enough.

                    Example: result_workers=3



Queue Names
-----------

You may want to watch your gearman server job queue. The shipped
tools/queue_top.pl does this. It polls the gearman server every second
and displays the current queue statistics.

 +-----------------------+--------+-------+-------+---------+
 | Name                  | Worker | Avail | Queue | Running |
 +-----------------------+--------+-------+-------+---------+
 | check_results         | 1      | 1     | 0     | 0       |
 | host                  | 3      | 3     | 0     | 0       |
 | service               | 3      | 3     | 0     | 0       |
 | eventhandler          | 3      | 3     | 0     | 0       |
 | servicegroup_jmx4perl | 3      | 3     | 0     | 0       |
 | hostgroup_japan       | 3      | 3     | 0     | 0       |
 +-----------------------+--------+-------+-------+---------+


check_results         this queue is monitored by the neb module to
                      fetch results from the worker.
                      You don't need an extra worker for this queue.
                      The number of result workers can be set to a
                      maximum of 256, but usually one is enough.
                      One worker is capable of processing several
                      thousand results per second.


host                  This is the queue for generic host checks. If
                      you enable host checks with the hosts=yes switch.
                      Before a host goes into this queue, it is
                      checked if any of the local groups matches or a
                      seperate hostgroup machtes. If nothing matches,
                      then this queue is used.


service               This is the queue for generic service checks. If
                      you enable service checks with the services=yes
                      switch. Before a service goes into this queue
                      it is checked against the local host- and
                      service-groups. Then the normal host- and
                      servicegroups are checked and if none matches,
                      this queue is used.


hostgroup_<name>      This queue is created for every hostgroup which
                      has been defined by the hostgroups=... option.
                      Make sure you have at least one worker for every
                      hostgroup you specify. Start the worker with
                      --hostgroups=... to work on hostgroup queues.
                      Note that this queue may also contain service
                      checks if the hostgroup of a service matches.


servicegroup_<name>   This queue is created for every servicegroup
                      which has been defined by the servicegroup=...
                      option.


eventhandler          This is the generic queue for all eventhandler.
                      Make sure you have a worker for this queue if
                      you have eventhandler enabled. Start the worker
                      with --events to work on this queue.


